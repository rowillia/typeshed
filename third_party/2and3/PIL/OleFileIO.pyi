# Stubs for PIL.OleFileIO (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import io

__date__ = ...  # type: str
long = ...  # type: Any
iterrange = ...  # type: Any
UINT32 = ...  # type: str
basestring = ...  # type: Any
KEEP_UNICODE_NAMES = ...  # type: bool
DEFAULT_PATH_ENCODING = ...  # type: str
DEBUG_MODE = ...  # type: bool

def debug_print(msg): ...
def debug_pass(msg): ...

debug = ...  # type: Any

def set_debug_mode(debug_mode): ...

MAGIC = ...  # type: bytes
MAXREGSECT = ...  # type: int
DIFSECT = ...  # type: int
FATSECT = ...  # type: int
ENDOFCHAIN = ...  # type: int
FREESECT = ...  # type: int
MAXREGSID = ...  # type: int
NOSTREAM = ...  # type: int
STGTY_EMPTY = ...  # type: int
STGTY_STORAGE = ...  # type: int
STGTY_STREAM = ...  # type: int
STGTY_LOCKBYTES = ...  # type: int
STGTY_PROPERTY = ...  # type: int
STGTY_ROOT = ...  # type: int
VT_EMPTY = ...  # type: int
VT_NULL = ...  # type: int
VT_I2 = ...  # type: int
VT_I4 = ...  # type: int
VT_R4 = ...  # type: int
VT_R8 = ...  # type: int
VT_CY = ...  # type: int
VT_DATE = ...  # type: int
VT_BSTR = ...  # type: int
VT_DISPATCH = ...  # type: int
VT_ERROR = ...  # type: int
VT_BOOL = ...  # type: int
VT_VARIANT = ...  # type: int
VT_UNKNOWN = ...  # type: int
VT_DECIMAL = ...  # type: int
VT_I1 = ...  # type: int
VT_UI1 = ...  # type: int
VT_UI2 = ...  # type: int
VT_UI4 = ...  # type: int
VT_I8 = ...  # type: int
VT_UI8 = ...  # type: int
VT_INT = ...  # type: int
VT_UINT = ...  # type: int
VT_VOID = ...  # type: int
VT_HRESULT = ...  # type: int
VT_PTR = ...  # type: int
VT_SAFEARRAY = ...  # type: int
VT_CARRAY = ...  # type: int
VT_USERDEFINED = ...  # type: int
VT_LPSTR = ...  # type: int
VT_LPWSTR = ...  # type: int
VT_FILETIME = ...  # type: int
VT_BLOB = ...  # type: int
VT_STREAM = ...  # type: int
VT_STORAGE = ...  # type: int
VT_STREAMED_OBJECT = ...  # type: int
VT_STORED_OBJECT = ...  # type: int
VT_BLOB_OBJECT = ...  # type: int
VT_CF = ...  # type: int
VT_CLSID = ...  # type: int
VT_VECTOR = ...  # type: int
VT = ...  # type: Any
WORD_CLSID = ...  # type: str
DEFECT_UNSURE = ...  # type: int
DEFECT_POTENTIAL = ...  # type: int
DEFECT_INCORRECT = ...  # type: int
DEFECT_FATAL = ...  # type: int
MINIMAL_OLEFILE_SIZE = ...  # type: int

def isOleFile(filename): ...
def i8(c): ...
def i16(c, o: int = ...): ...
def i32(c, o: int = ...): ...
def filetime2datetime(filetime): ...

class OleMetadata:
    SUMMARY_ATTRIBS = ...  # type: Any
    DOCSUM_ATTRIBS = ...  # type: Any
    codepage = ...  # type: Any
    title = ...  # type: Any
    subject = ...  # type: Any
    author = ...  # type: Any
    keywords = ...  # type: Any
    comments = ...  # type: Any
    template = ...  # type: Any
    last_saved_by = ...  # type: Any
    revision_number = ...  # type: Any
    total_edit_time = ...  # type: Any
    last_printed = ...  # type: Any
    create_time = ...  # type: Any
    last_saved_time = ...  # type: Any
    num_pages = ...  # type: Any
    num_words = ...  # type: Any
    num_chars = ...  # type: Any
    thumbnail = ...  # type: Any
    creating_application = ...  # type: Any
    security = ...  # type: Any
    codepage_doc = ...  # type: Any
    category = ...  # type: Any
    presentation_target = ...  # type: Any
    bytes = ...  # type: Any
    lines = ...  # type: Any
    paragraphs = ...  # type: Any
    slides = ...  # type: Any
    notes = ...  # type: Any
    hidden_slides = ...  # type: Any
    mm_clips = ...  # type: Any
    scale_crop = ...  # type: Any
    heading_pairs = ...  # type: Any
    titles_of_parts = ...  # type: Any
    manager = ...  # type: Any
    company = ...  # type: Any
    links_dirty = ...  # type: Any
    chars_with_spaces = ...  # type: Any
    unused = ...  # type: Any
    shared_doc = ...  # type: Any
    link_base = ...  # type: Any
    hlinks = ...  # type: Any
    hlinks_changed = ...  # type: Any
    version = ...  # type: Any
    dig_sig = ...  # type: Any
    content_type = ...  # type: Any
    content_status = ...  # type: Any
    language = ...  # type: Any
    doc_version = ...  # type: Any
    def __init__(self) -> None: ...
    def parse_properties(self, olefile): ...
    def dump(self): ...

class _OleStream(io.BytesIO):
    size = ...  # type: Any
    def __init__(self, fp, sect, size, offset, sectorsize, fat, filesize) -> None: ...

class _OleDirectoryEntry:
    STRUCT_DIRENTRY = ...  # type: str
    DIRENTRY_SIZE = ...  # type: int
    sid = ...  # type: Any
    olefile = ...  # type: Any
    kids = ...  # type: Any
    kids_dict = ...  # type: Any
    used = ...  # type: bool
    name = ...  # type: Any
    size = ...  # type: Any
    clsid = ...  # type: Any
    def __init__(self, entry, sid, olefile) -> None: ...
    def build_storage_tree(self): ...
    def append_kids(self, child_sid): ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __ne__(self, other): ...
    def __le__(self, other): ...
    def dump(self, tab: int = ...): ...
    def getmtime(self): ...
    def getctime(self): ...

class OleFileIO:
    parsing_issues = ...  # type: Any
    write_mode = ...  # type: Any
    path_encoding = ...  # type: Any
    fp = ...  # type: Any
    def __init__(self, filename: Optional[Any] = ..., raise_defects: Any = ..., write_mode: bool = ..., debug: bool = ..., path_encoding: Any = ...) -> None: ...
    def raise_defect(self, defect_level, message, exception_type: Any = ...): ...
    SectorSize = ...  # type: Any
    MiniSectorSize = ...  # type: Any
    nb_sect = ...  # type: Any
    clsid = ...  # type: Any
    sectorsize = ...  # type: Any
    minisectorsize = ...  # type: Any
    minisectorcutoff = ...  # type: Any
    ministream = ...  # type: Any
    minifatsect = ...  # type: Any
    def open(self, filename, write_mode: bool = ...): ...
    def close(self): ...
    def dumpfat(self, fat, firstindex: int = ...): ...
    def dumpsect(self, sector, firstindex: int = ...): ...
    def sect2array(self, sect): ...
    fat = ...  # type: Any
    def loadfat_sect(self, sect): ...
    def loadfat(self, header): ...
    minifat = ...  # type: Any
    def loadminifat(self): ...
    def getsect(self, sect): ...
    def write_sect(self, sect, data, padding: bytes = ...): ...
    directory_fp = ...  # type: Any
    direntries = ...  # type: Any
    root = ...  # type: Any
    def loaddirectory(self, sect): ...
    def dumpdirectory(self): ...
    def listdir(self, streams: bool = ..., storages: bool = ...): ...
    def openstream(self, filename): ...
    def write_stream(self, stream_name, data): ...
    def get_type(self, filename): ...
    def getmtime(self, filename): ...
    def getctime(self, filename): ...
    def exists(self, filename): ...
    def get_size(self, filename): ...
    def get_rootentry_name(self): ...
    def getproperties(self, filename, convert_time: bool = ..., no_conversion: Optional[Any] = ...): ...
    metadata = ...  # type: Any
    def get_metadata(self): ...
