# Stubs for PIL.TiffImagePlugin (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import collections
from . import ImageFile
from .TiffTags import TAGS_V2 as TAGS_V2, TYPES as TYPES, TagInfo as TagInfo

DEBUG = ...  # type: bool
READ_LIBTIFF = ...  # type: bool
WRITE_LIBTIFF = ...  # type: bool
IFD_LEGACY_API = ...  # type: bool
II = ...  # type: bytes
MM = ...  # type: bytes
i8 = ...  # type: Any
o8 = ...  # type: Any
IMAGEWIDTH = ...  # type: int
IMAGELENGTH = ...  # type: int
BITSPERSAMPLE = ...  # type: int
COMPRESSION = ...  # type: int
PHOTOMETRIC_INTERPRETATION = ...  # type: int
FILLORDER = ...  # type: int
IMAGEDESCRIPTION = ...  # type: int
STRIPOFFSETS = ...  # type: int
SAMPLESPERPIXEL = ...  # type: int
ROWSPERSTRIP = ...  # type: int
STRIPBYTECOUNTS = ...  # type: int
X_RESOLUTION = ...  # type: int
Y_RESOLUTION = ...  # type: int
PLANAR_CONFIGURATION = ...  # type: int
RESOLUTION_UNIT = ...  # type: int
SOFTWARE = ...  # type: int
DATE_TIME = ...  # type: int
ARTIST = ...  # type: int
PREDICTOR = ...  # type: int
COLORMAP = ...  # type: int
TILEOFFSETS = ...  # type: int
EXTRASAMPLES = ...  # type: int
SAMPLEFORMAT = ...  # type: int
JPEGTABLES = ...  # type: int
COPYRIGHT = ...  # type: int
IPTC_NAA_CHUNK = ...  # type: int
PHOTOSHOP_CHUNK = ...  # type: int
ICCPROFILE = ...  # type: int
EXIFIFD = ...  # type: int
XMP = ...  # type: int
IMAGEJ_META_DATA_BYTE_COUNTS = ...  # type: int
IMAGEJ_META_DATA = ...  # type: int
COMPRESSION_INFO = ...  # type: Any
COMPRESSION_INFO_REV = ...  # type: Any
OPEN_INFO = ...  # type: Any
PREFIXES = ...  # type: Any

class ImageFileDirectory_v2(collections.MutableMapping):
    def __init__(self, ifh: bytes = ..., prefix: Optional[Any] = ...) -> None: ...
    prefix = ...  # type: Any
    offset = ...  # type: Any
    legacy_api = ...  # type: Any
    @legacy_api.setter
    def legacy_api(self, value): ...
    tagtype = ...  # type: Any
    def reset(self): ...
    def as_dict(self): ...
    def named(self): ...
    def __len__(self): ...
    def __getitem__(self, tag): ...
    def __contains__(self, tag): ...
    def has_key(self, tag): ...
    def __setitem__(self, tag, value): ...
    def __delitem__(self, tag): ...
    def __iter__(self): ...
    def load_byte(self, data, legacy_api: bool = ...): ...
    def write_byte(self, data): ...
    def load_string(self, data, legacy_api: bool = ...): ...
    def write_string(self, value): ...
    def load_rational(self, data, legacy_api: bool = ...): ...
    def write_rational(self, *values): ...
    def load_undefined(self, data, legacy_api: bool = ...): ...
    def write_undefined(self, value): ...
    def load_signed_rational(self, data, legacy_api: bool = ...): ...
    def write_signed_rational(self, *values): ...
    def load(self, fp): ...
    def save(self, fp): ...

name = ...  # type: Any

class ImageFileDirectory_v1(ImageFileDirectory_v2):
    def __init__(self, *args, **kwargs) -> None: ...
    tags = ...  # type: Any
    tagdata = ...  # type: Any
    @classmethod
    def from_v2(cls, original): ...
    def to_v2(self): ...
    def __contains__(self, tag): ...
    def __len__(self): ...
    def __iter__(self): ...
    def __setitem__(self, tag, value): ...
    def __getitem__(self, tag): ...

ImageFileDirectory = ...  # type: Any

class TiffImageFile(ImageFile.ImageFile):
    format = ...  # type: str
    format_description = ...  # type: str
    @property
    def n_frames(self): ...
    @property
    def is_animated(self): ...
    im = ...  # type: Any
    def seek(self, frame): ...
    def tell(self): ...

SAVE_INFO = ...  # type: Any
