# Stubs for PIL.PngImagePlugin (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from . import ImageFile

logger = ...  # type: Any
i8 = ...  # type: Any
i16 = ...  # type: Any
i32 = ...  # type: Any
is_cid = ...  # type: Any
MAX_TEXT_CHUNK = ...  # type: Any
MAX_TEXT_MEMORY = ...  # type: Any

class ChunkStream:
    fp = ...  # type: Any
    queue = ...  # type: Any
    def __init__(self, fp) -> None: ...
    def read(self): ...
    def close(self): ...
    def push(self, cid, pos, length): ...
    def call(self, cid, pos, length): ...
    def crc(self, cid, data): ...
    def crc_skip(self, cid, data): ...
    def verify(self, endchunk: bytes = ...): ...

class iTXt(str):
    lang = ...  # type: Any
    tkey = ...  # type: Any
    @staticmethod
    def __new__(cls, text, lang, tkey): ...

class PngInfo:
    chunks = ...  # type: Any
    def __init__(self) -> None: ...
    def add(self, cid, data): ...
    def add_itxt(self, key, value, lang: str = ..., tkey: str = ..., zip: bool = ...): ...
    def add_text(self, key, value, zip: int = ...): ...

class PngStream(ChunkStream):
    im_info = ...  # type: Any
    im_text = ...  # type: Any
    im_size = ...  # type: Any
    im_mode = ...  # type: Any
    im_tile = ...  # type: Any
    im_palette = ...  # type: Any
    text_memory = ...  # type: int
    def __init__(self, fp) -> None: ...
    def check_text_memory(self, chunklen): ...
    def chunk_iCCP(self, pos, length): ...
    def chunk_IHDR(self, pos, length): ...
    im_idat = ...  # type: Any
    def chunk_IDAT(self, pos, length): ...
    def chunk_IEND(self, pos, length): ...
    def chunk_PLTE(self, pos, length): ...
    def chunk_tRNS(self, pos, length): ...
    def chunk_gAMA(self, pos, length): ...
    def chunk_pHYs(self, pos, length): ...
    def chunk_tEXt(self, pos, length): ...
    def chunk_zTXt(self, pos, length): ...
    def chunk_iTXt(self, pos, length): ...

class PngImageFile(ImageFile.ImageFile):
    format = ...  # type: str
    format_description = ...  # type: str
    fp = ...  # type: Any
    def verify(self): ...
    decoderconfig = ...  # type: Any
    def load_prepare(self): ...
    def load_read(self, read_bytes): ...
    png = ...  # type: Any
    def load_end(self): ...

o8 = ...  # type: Any
o16 = ...  # type: Any
o32 = ...  # type: Any

def putchunk(fp, cid, *data): ...

class _idat:
    fp = ...  # type: Any
    chunk = ...  # type: Any
    def __init__(self, fp, chunk) -> None: ...
    def write(self, data): ...

def getchunks(im, **params): ...
