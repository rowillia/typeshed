# Stubs for PIL.ImageDraw (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Tuple, Union, Sequence

from PIL.Image import Image

warnings = ...  # type: Any

class ImageDraw:
    palette = ...  # type: Any
    im = ...  # type: Any
    draw = ...  # type: Any
    mode = ...  # type: Any
    ink = ...  # type: Any
    fontmode = ...  # type: str
    fill = ...  # type: int
    font = ...  # type: Any
    def __init__(self, im, mode: Optional[Any] = ...) -> None: ...
    def setink(self, ink): ...
    def setfill(self, onoff): ...
    def setfont(self, font): ...
    def getfont(self): ...
    def arc(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], start, end, fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ...) -> None: ...
    def bitmap(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], bitmap, fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ...) -> None: ...
    def chord(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], start, end, fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., outline: Optional[Any] = ...) -> None: ...
    def ellipse(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., outline: Optional[Any] = ...) -> None: ...
    def line(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., width: int = ...) -> None: ...
    def shape(self, shape, fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., outline: Optional[Any] = ...) -> None: ...
    def pieslice(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], start, end, fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., outline: Optional[Any] = ...) -> None: ...
    def point(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ...) -> None: ...
    def polygon(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., outline: Optional[Any] = ...) -> None: ...
    def rectangle(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., outline: Optional[Any] = ...) -> None: ...
    def text(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], text, fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., font: Optional[Any] = ..., anchor: Optional[Any] = ...) -> None: ...
    def multiline_text(self, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], text, fill: Optional[Union[int, Tuple[float, float, float], Tuple[float, float, float, float], str]] = ..., font: Optional[Any] = ..., anchor: Optional[Any] = ..., spacing: int = ..., align: str = ...) -> None: ...
    def textsize(self, text, font: Optional[Any] = ...) -> None: ...
    def multiline_textsize(self, text, font: Optional[Any] = ..., spacing: int = ...) -> None: ...

def Draw(im: Image, mode: Optional[Any] = ...) -> ImageDraw: ...

Outline = ...  # type: Any

def getdraw(im: Optional[Image] = ..., hints: Optional[Any] = ...): ...
def floodfill(image: Image, xy: Union[Sequence[int], Sequence[Tuple[int, int]]], value, border: Optional[Any] = ...): ...
